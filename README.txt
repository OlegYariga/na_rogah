Na-rogah-api

Описание проекта:

Проект "na-rogah-api" это мобильное приложение, построенное на архитектуре клиент-сервер. Серверная часть разработана на языке python (v. 3.7.1) с использованием микрофреймворка Flask и включает в себя взаимодействие с базой данных и CRUD данных БД, а так же, выдачу определенных данных определенным способом на клиент (например, выдача даты последнего обновления БД и количества записей в таблице menu. 

Структура приложния:

•app.py - файл содержит объявление объектов классов, необходимых для работы приложения (Flask, SQLAlchemy, Migrate, Manager, Session, LoginManager, Admin, Security, SQLAlchemyUserDatastore, Mail)
•admin.py - файл содержит необходимые настройки админ-панели (кастомизация ModelView, проверка роли пользователя, разрешение на редактирование/удаление/создание записей в таблицах БД)
•config.py - содержит настройки приложения (используемая БД, данные для отправки почтовых сообщений через SMTP, и тд)
•main.py - служит точкой входа программы и содержит строку запуска приложения (app.run)
•manage.py - содержит вызов менеджера миграций БД.
•models.py - файл моделей. Используется при выполнении миграций БД, а так же для подключение админ-панели и CRUD данных БД
•view.py - файл с описанием всех эндпоинтов приложения

•Procfile содержит dyno web gunicorn main:app. Эта команда с помощью которой запускается приложение на сервере Heroku
•requirements.txt - файл содержит все используемые в проекте библиотеки, а так же их версии

Команды для миграции:

python manage.py db init - инициализация каталога migrations
python manage.py db migrate - создание миграции
python manage.py db upgrade - обновление БД

Функции, реализованные в приложении:
1. Заполнение меню и категорий через админку и отправка его на клиент.
2. CRUD пользователей и пользовательских данных
3. Регистрация с подтверждением email по почте через SMTP-сервер Google

Deploy to server:
git init
git add .
git commit -am "Commit name"
git push heroku master

Подробнее: https://dashboard.heroku.com

При обнаружении файла Procfile с приведенным выше содержанием, файла requirements.txt, а также всех файлов проекта, heroku автоматически запускает приложение. 

Просмотр логов с помощью команды: heroku logs